(CreateUser.js)
여러개의 값을 사용할 땐
useState 객체셋팅

 const [inputs, setInputs] = useState({
    username : '',
    email : ''
  });

  const {username, email} = inputs;
  //비구조할당

 const onChange = e => {
    const {name, value} = e.target;
    setInputs({
      ...inputs,
      [name] : value
    })
  }
 // input마다 값이 바뀌는 것을 체크
 

 --
 const users = [
    {
        id:1,
        username:'velopert',
        email : 'public.velopoert@gamil.com'
    },
    {
        id:2,
        username:'tester',
        email : 'tester@example.com'
    },
    {
        id:3,
        username:'liz',
        email : 'liz@example.com'
    },
];

이 users 배열을 컴포넌트 상태로써 관리해주도록한다.
useState를 사용한다.

const [users,setUsers] = useState([
    {
        id:1,
        username:'velopert',
        email : 'public.velopoert@gamil.com'
    },
    {
        id:2,
        username:'tester',
        email : 'tester@example.com'
    },
    {
        id:3,
        username:'liz',
        email : 'liz@example.com'
    },
]);

-- 
배열에 변화를 주는 방법
객체 복사 ...inputs + 값 덮어씌운것 처럼

push
splice
sort
같은 함수는 사용하지 않는다.
꼭 사용해야할 경우에는 배열을 복사하고 사용한다.
배열의 불변성을 지키면서 추가해야한다.

[방법1] 스프레드 연산자 사용.

const onCreate = () => {

  //1. 새로운 user 객체를 만들어준다
  const user = {
    id : nextId.current,
    // ...inputs
    username,
    email,
  }
 //2. 기존 배열을 복사해서 새롭게 만든 객체를 추가한다.
  setUsers([...users, user]);

  //3. input 빈값
  setInputs({
    username :'',
    email :''
  })


  nextId.current += 1 ;

}


[방법2] concat 함수 사용
concat 은 여러개의 배열을 하나의 배열로 합쳐줄 때 사용.
--
(예시)
const arr1 = [1,2,3];
const arr2 = [4,5,6];
const concated = arr1.concat(arr2); 
console.log(concated) //[1,2,3,4,5,6]
--
const onCreate = () => {

  //1. 새로운 user 객체를 만들어준다
  const user = {
    id : nextId.current,
    // ...inputs
    username,
    email,
  }
  
  //2. concat 함수 사용하기로도 객체 추가할 수 있다.
  setUsers(users.concat(user));
  
  //3. input 빈값
  setInputs({
    username :'',
    email :''
  })


  nextId.current += 1 ;

}