데이터 상태관리 useState를 사용했는데,
useReducer를 사용하는 방법도 있다.


useState는
setValue(5); 와 같이
설정하고 싶은 다음 상태를 직접 설정하는 방법.

useReducer는
dispatch({type : 'INCREMENT'})
액션이라는 객체기반으로 업데이트하고 싶은 것을 명시
액션 : 업데이트할 때 참고하는 객체기반으로

상태 업데이트 로직을 컴포넌트 밖으로 분리 가능.

reducer : 상태를 업데이트하는 함수.

(예)
function reducer(state, action) {   //action객체를 받아와
    switch(action.type){    //action.type 업데이트 상태 확인
        case : 'INCREMENT' : 
            retrun state + 1;   //반환
        care : 'DECREMENT' : 
            return state - 1;
        default : 
            return state;
    }
}


useReducer사용

const [number, dispatch] = useReducer(reducer, 0);
//reducer : 상태를 업데이트하는 함수.
//0 : 기본값(숫자,문자,배열,객체일 수 있다)

//number : 현재 상태
//dispatch : 액션을 발생시키는 함수
(dispatch의 의미 "~보내다"라는 의미.)

---
(Counter2.js)작성.


기존에는 
import React, {useState} from 'react';
useState를 사용하여 구현해줬다.


import React, {useReducer} from 'react';
useReducer를 사용해서 구현하기.


1. reducer라는 함수를 만들어준다.
function reducer(state,action){
    switch(action.type){
        case 'INCREMENT' : 
            return state + 1;
        case 'DECREMENT' : 
            return state - 1;
        default : 
            // return state; 또는
            throw new Error('Unhandled action');
    }
}

2. useReducer Hook 사용

const [number, dispatch] = useReducer(reducer, 0);

 const onIncrease = () => {
    dispatch({
        type : 'INCREMENT'
    })
}

const onDecrease = () => {
    dispatch({
        type : 'DECREMENT'
    })
}

onIncrease,onDecrease내용 변경.

==
Index.js에서

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

App을 렌더링 하던걸

Counter2로 잠깐 변경.
확인하고 다시 돌릴 것.
==

확인해보면

function reducer(state,action){
    ...
}
상태 업데이트 로직이 밖에서 동작하는 것을 
확인할 수 있다.