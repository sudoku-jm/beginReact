React.memo
(CreateUser2.js)

export default CreateUser2;
컴포넌트를 내보내는 곳에 

export default React.memo(CreateUser2);
React.memo()로 감싸준다.

이렇게하면 props가 바뀌었을 때만 리렌더링 해준다.

(UserList3.js)에도 해준다.

export default UserList3;
export default React.memo(UserList3);


function User({user, onRemove, onToggle}){
    ...
}

User컴포넌트의 경우는


const User = React.memo(function User({user, onRemove, onToggle}){
    ...
})
함수 자체를 감싸준다.

하지만 
onToggle, onRemove, onCreate 함수는
<UserList3 
users={users} 
onRemove={onRemove} 
onToggle={onToggle} 
/>

List로 내려주고, props로 [users]값이 바뀔때마다 변경하며 ,User로 또 내려간다.
 <User 
    key={user.id} 
    user={user} 
    onRemove={onRemove} 
    onToggle={onToggle}
/>

useState 함수형 업데이트를 시켜준다.

App.js

//추가
const onCreate = useCallback(() => {
  const user = {
    id : nextId.current,
    username,
    email,
  }

  setUsers(users => users.concat(user)); //함수형 업데이트
  // users => 를 등록하는 useCallback함수의 파라미터에서  최신 users만 조회하기 때문에 

  setInputs({
    username :'',
    email :''
  })
  nextId.current += 1 ;

},[username, email]); //파라미터 users를 넣지않아도 된다.
//username과 email이 바뀔때에만 작동.



//삭제
const onRemove = useCallback(id => {
  setUsers(users => users.filter(user => user.id !== id));
},[]);

onRemove는 컴포넌트가 렌더링될 때 딱 한번 만들어지고
그 다음부터는 계속 재사용된다.

//active 토글
const onToggle = useCallback(id => {
  setUsers(users => users.map(
    user => user.id === id 
    ? {...user, active: !user.active}
    : user                          
    ))
},[]);

--
(UserList3.js)
export default React.memo(
    UserList3,
    (prevProps, nextProps) => nextProps.users === prevProps.users
);

prevProps, nextProps 의 users가 같으면 리렌더링 하지 않는다.

* 나머지 props가 정말로 고정적이라서 비교할 필요 없는지 알아야한다.
함수형 업데이트(users =>) 를 하지 않았더라면,
CreateUser2에서 onRemove나 onToggle를 호출하게 될 때
최신상태의 users를 가리키고 있지 않기때문에 오류가 날 것이다.

==

연산된 값을 재사용 : useMemo()
특정 함수를 재사용 : useCallback()
컴포넌트 렌더링된 것을 재사용 : React.memo()

* 최적화가 꼭 필요한 곳에만 쓰도록하자.

데이터 상태관리 useState를 사용했는데,
useReducer를 사용하는 방법도 있다.(20번 노트에 계속...)