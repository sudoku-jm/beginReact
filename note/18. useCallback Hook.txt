useCallBack를 사용하여 함수 재사용하기.

useMemo와 비슷하지만 함수를 위한 Hook이다.

const onCreate
const onRemove
const onToggle 등..
과 같은 함수를 만드는건 괜찮지만,

 <CreateUser2 
username={username} 
email={email} 
onChange={onChange} 
onCreate={onCreate} 
/>
<UserList3 
users={users} 
onRemove={onRemove} 
onToggle={onToggle} 
/>
이러한 컴포넌트들이 props가 안바뀌었다면
함수들도 리렌더링 조차 안하게끔 만들어 줄 수 있다.

props가 안바뀌었다면 컴포넌트들도 새로 그리는게 아니라
이전에 만들어놨던 컴포넌트 결과물을 재사용할 수 있게
구현할 수 있다.

그럴려면 함수도 재사용해줘야한다.

useMemo처럼 함수를 감싸고 []deps도 넣어줘야한다.


--
App.js

import React, {useRef, useState, useMemo, useCallback} from 'react';


const onChange = useCallback(e => {
    const {name, value} = e.target;
    setInputs({
        ...inputs,
        [name] : value
    })
},[inputs]);

onChange함수는 inputs가 바뀔때만 사용된다.


const onCreate = useCallback(() => {

  const user = {
    id : nextId.current,
    username,
    email,
  }

  setUsers(users.concat(user));
  

  setInputs({
    username :'',
    email :''
  })
  nextId.current += 1 ;

},[usename, email, users]);



const onRemove = useCallback(id => {
  setUsers(users.filter(user => user.id !== id));
},[id, users]);



const onToggle = useCallback(id => {
  setUsers(users.map(
    user => user.id === id 
    ? {...user, active: !user.active} //true
    : user                          //false
    ))
},[users]);

--
현재 어떤 컴포넌트가 리렌더링 되고 있는지
확인하려면
react devtools 설치
https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=ko


개발자도구[F12] -> React / Components -> 톱니바퀴
-> Highlight updates when components render. 
체크하고 input에 타이핑을 하면
리렌더링되고 있는 컴포넌트를 확인 할 수 있다.
몇 천개 몇 만개가 되면 느려진다.

